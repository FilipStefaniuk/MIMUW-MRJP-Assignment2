

module AbsLatte where

-- Haskell module generated by the BNF converter




newtype Ident = Ident String deriving (Eq, Ord, Show, Read)
data Program = Prog [TopDef]
  deriving (Eq, Ord, Show, Read)

data TopDef
    = TopFunDef FunDef
    | ClassDef Ident [ClassItemDef]
    | ClassExtDef Ident Ident [ClassItemDef]
  deriving (Eq, Ord, Show, Read)

data ClassItemDef = AttrDef Type Ident | MethodDef FunDef
  deriving (Eq, Ord, Show, Read)

data FunDef = FunDef Type Ident [Arg] Block
  deriving (Eq, Ord, Show, Read)

data Arg = Ar Type Ident
  deriving (Eq, Ord, Show, Read)

data Block = Blk [Stmt]
  deriving (Eq, Ord, Show, Read)

data Stmt
    = Empty
    | BStmt Block
    | Decl Type [Item]
    | Ass LVal Expr
    | Incr LVal
    | Decr LVal
    | Ret Expr
    | VRet
    | Cond Expr Stmt
    | CondElse Expr Stmt Stmt
    | While Expr Stmt
    | For Type Ident Expr Stmt
    | SExp Expr
  deriving (Eq, Ord, Show, Read)

data Item = NoInit Ident | Init Ident Expr
  deriving (Eq, Ord, Show, Read)

data LVal = LVar Ident | LArr Expr Expr | LAttr Expr Ident | LSelf
  deriving (Eq, Ord, Show, Read)

data Type = Void | Int | Str | Bool | Arr Type | Obj Ident | Null
  deriving (Eq, Ord, Show, Read)

data Expr
    = ELitInt Integer
    | EString String
    | ELitTrue
    | ELitFalse
    | ENull
    | EVar LVal
    | ECall Ident [Expr]
    | EMetCall Expr Ident [Expr]
    | ENewObj Ident
    | ENewArr Type Expr
    | ECast Ident Expr
    | Neg Expr
    | Not Expr
    | EMul Expr MulOp Expr
    | EAdd Expr AddOp Expr
    | ERel Expr RelOp Expr
    | EAnd Expr Expr
    | EOr Expr Expr
  deriving (Eq, Ord, Show, Read)

data AddOp = Plus | Minus
  deriving (Eq, Ord, Show, Read)

data MulOp = Times | Div | Mod
  deriving (Eq, Ord, Show, Read)

data RelOp = LTH | LE | GTH | GE | EQU | NE
  deriving (Eq, Ord, Show, Read)

