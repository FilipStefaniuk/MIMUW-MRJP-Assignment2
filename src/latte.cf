-- programs ------------------------------------------------

entrypoints Program ;

Prog.           Program ::= [TopDef] ;

separator nonempty TopDef "" ;
TopFunDef.      TopDef ::= FunDef ;	        
ClassDef.       TopDef ::= "class" Ident "{" [ClassItemDef] "}" ;
ClassExtDef.    TopDef ::= "class" Ident "extends" Ident "{" [ClassItemDef] "}" ;

separator ClassItemDef "" ;
AttrDef.        ClassItemDef ::= Type Ident ";" ;
MethodDef.      ClassItemDef ::= FunDef ;

FunDef.         FunDef ::= Type Ident "(" [Arg] ")" Block ;

separator Arg "," ;
Ar. 	        Arg ::= Type Ident;

-- statements ----------------------------------------------

Blk.            Block ::= "{" [Stmt] "}" ;

separator Stmt "" ;
Empty.          Stmt ::= ";" ;
BStmt.          Stmt ::= Block ;
Decl.           Stmt ::= Type [Item] ";" ;
Ass.            Stmt ::= LVal "=" Expr  ";" ;
Incr.           Stmt ::= LVal "++"  ";" ;
Decr.           Stmt ::= LVal "--"  ";" ;
Ret.            Stmt ::= "return" Expr ";" ;
VRet.           Stmt ::= "return" ";" ;
Cond.           Stmt ::= "if" "(" Expr ")" Stmt  ;
CondElse.       Stmt ::= "if" "(" Expr ")" Stmt "else" Stmt  ;
While.          Stmt ::= "while" "(" Expr ")" Stmt ;
For.            Stmt ::= "for" "(" Type Ident ":" Expr ")" Stmt ;
SExp.           Stmt ::= Expr  ";" ; 

separator nonempty Item "," ;
NoInit.         Item ::= Ident ; 
Init.           Item ::= Ident "=" Expr ;

-- lval ----------------------------------------------------

LVar.           LVal ::= Ident ;
LArr.           LVal ::= Expr7 "[" Expr "]" ;
LAttr.          LVal ::= Expr7 "." Ident ;
LSelf.          LVal ::= "this" ;

-- types ---------------------------------------------------

Void.           Type ::= "void" ;
Int.            Type ::= "int" ;
Str.            Type ::= "string" ;
Bool.           Type ::= "boolean" ;
Arr.            Type ::= Type "[]" ;
Obj.            Type ::= Ident ;
internal Null.  Type ::= "null" ;

-- expressions ---------------------------------------------

separator Expr "," ;
coercions Expr 7 ;
ELitInt.        Expr7 ::= Integer ;
EString.        Expr7 ::= String ;
ELitTrue.       Expr7 ::= "true" ;
ELitFalse.      Expr7 ::= "false" ;
ENull.          Expr7 ::= "null" ;
EVar.           Expr7 ::= LVal ;
ECall.          Expr7 ::= Ident "(" [Expr] ")" ;
EMetCall.       Expr7 ::= Expr7 "." Ident "(" [Expr] ")" ;
ENewObj.        Expr6 ::= "new" Ident ;
ENewArr.        Expr6 ::= "new" Type "[" Expr "]" ;
Neg.            Expr5 ::= "-" Expr6 ;
Not.            Expr5 ::= "!" Expr6 ;
EMul.           Expr4 ::= Expr4 MulOp Expr5 ;
EAdd.           Expr3 ::= Expr3 AddOp Expr4 ;
ERel.           Expr2 ::= Expr2 RelOp Expr3 ;
EAnd.           Expr1 ::= Expr2 "&&" Expr1 ;
EOr.            Expr ::= Expr1 "||" Expr ;

-- operators -----------------------------------------------

Plus.           AddOp ::= "+" ;
Minus.          AddOp ::= "-" ;

Times.          MulOp ::= "*" ;
Div.            MulOp ::= "/" ;
Mod.            MulOp ::= "%" ;

LTH.            RelOp ::= "<" ;
LE.             RelOp ::= "<=" ;
GTH.            RelOp ::= ">" ;
GE.             RelOp ::= ">=" ;
EQU.            RelOp ::= "==" ;
NE.             RelOp ::= "!=" ;

-- comments ------------------------------------------------

comment "#" ;
comment "//" ;
comment "/*" "*/" ;
